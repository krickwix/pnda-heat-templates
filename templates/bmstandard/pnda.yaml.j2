
parameters:
  SaltmasterFlavor:
    type: string
    description: Flavor for the salmaster nodes
  Manager1Flavor:
    type: string
    description: Flavor for the manager nodes
  Manager2Flavor:
    type: string
    description: Flavor for the manager nodes
  EdgeFlavor:
    type: string
    description: Flavor for the edge node
  OpentsdbNodes:
    type: number
    default: 0
{%if create_bastion is equalto 1 %}
  BastionFlavor:
    type: string
    description: Flavor for the bastion nodes
{%endif%}
  ZookeeperFlavor:
    type: string
    description: Flavor for the zookeeper nodes
  KafkaFlavor:
    type: string
    description: Flavor for the kafka nodes
  DatanodeFlavor:
    type: string
    description: Flavor for the data nodes
  CMFlavor:
    type: string
    description: Flavor for the data nodes
  ZookeeperNodes:
    default: '0'
    description: Number of ZOOKEEPER nodes
    type: string
  KafkaNodes:
    default: '1'
    description: Number of KAFKA nodes
    type: string
  DataNodes:
    default: '4'
    description: Number of DATA nodes
    type: string
{%if create_volumes is equalto 1 %}
  DatanodeVolumeSize:
    default: 200
    type: number
{%endif%}
  PndaFlavor:
    description: pnda flavor
    type: string
  signal_transport:
    type: string
  software_config_transport:
    type: string

resources:
  pnda_cluster:
    type: OS::Pnda::cluster
{%if create_network is equalto 1 %}
    depends_on: [ router_interface, deploy_install, saltmaster_server ]
{%else%}
    depends_on: [ deploy_install, saltmaster_server ]
{%endif%}
    properties:
{%if create_network is equalto 1 %}
      private_net: { get_resource: private_net }
      private_subnet: { get_resource: private_subnet }
      public_net: { get_param: public_net }
      PndaSecGroup: { get_resource: PndaSecGroup }
      private_key: { get_attr: ['Key','private_key'] }
      KeyName: { get_resource: Key }
{%else%}
      KeyName: { get_param: KeyName }
{%endif%}
      git_private_key_file: { get_param: git_private_key_file }
      SaltmasterIP: { get_attr: ['saltmaster_server','first_address']}
      BastionKeyName: { get_param: KeyName }
      deployment_name: { get_param: 'OS::stack_name' }
      image_id: { get_param: image_id }
      EdgeFlavor: { get_param: EdgeFlavor }
      KafkaFlavor: { get_param: KafkaFlavor }
      CMFlavor: { get_param: CMFlavor }
      SaltmasterFlavor: { get_param: SaltmasterFlavor }
{%if create_bastion is equalto 1 %}
      BastionFlavor: { get_param: BastionFlavor }
{%endif%}
      DatanodeFlavor: { get_param: DatanodeFlavor }
      Manager1Flavor: { get_param: Manager1Flavor }
      Manager2Flavor: { get_param: Manager2Flavor }
      ZookeeperFlavor: { get_param: ZookeeperFlavor }
      ZookeeperNodes: { get_param: ZookeeperNodes }
      KafkaNodes: { get_param: KafkaNodes }
      DataNodes: { get_param: DataNodes }
{%if create_volumes is equalto 1 %}
      DatanodeVolumeSize : { get_param: DatanodeVolumeSize }
{%endif%}
      PndaFlavor: { get_param: PndaFlavor }

  saltmaster_server:
    type: OS::Nova::Server
{%if create_network is equalto 1 %}
    depends_on: [ router, private_subnet ]
{%endif%}
    properties:
      image: { get_param: image_id }
      flavor: { get_param: SaltmasterFlavor }
{%if create_network is equalto 1 %}
      key_name: { get_resource: Key }
      networks:
        - port: { get_resource: saltmaster_port }
{%else%}
      key_name: { get_param: KeyName }
{%endif%}
      name:
        str_replace:
          template: '%stackname%-saltmaster'
          params:
            '%stackname%': {get_param: 'OS::stack_name'}
      software_config_transport: { get_param: software_config_transport }
      user_data_format: SOFTWARE_CONFIG
      config_drive: True
